def factorial(x):
    if x==1: # this is the base case
        return 1

    else: # this is the recursive case
        return (x * factorial(x-1))

print(factorial(4))

"""یک تابع بازگشتی تابعی است که برای حل یک مساله خود را فراخوانی میکند و مساله را به زیر مسایل کوچکتر از همان نوع می شکند
 تا زمانی که به یک حالت پایه برسد این حالت شرطی ست که فراخوانی بازگشتی را متوقف میکند"""
"""بدون شرط حالت پایه تابع به طور نامحدود به فراخوانی خود ادامه میدهد که منجر به خطای overflow stack میشود
این تابع یک حالت بازگشتی هم دارد که شامل منطقی است که مساله طبق آن به زیرمسایل کوچکتر تقسیم میشود
در کد بالا بعد از تعریف تابع فاکتوریل با یک پارامتر که همان عددی خواهد بود که قرار است فاکتوریل انرا محاسبه کنیم.
حالت base یا پایه یا شرط توقف بازگشت را ایجاد میکنیم. تابع وقتی به این حالت میرسد یک را برمیگرداند
در ادامه حالت recursive یا بازگشت را ایجاد میکنیم که همان منطق محاسبه فاکتوریل و بطور بازگشتی و فراخوانی تابع فاکتوریل
 به ازای x هایی ست که در شرط حالت پایه صدق نکرده اند. در نهایت وقتی به حالت پایه میرسیم حالا بازگشت به عقب میکنیم
  و مقادیر را محاسبه میکنیم تا به جواب نهایی فاکتوریل x میرسیم. راه حل های بازگشتی مزایایی از جمله سادگی و زیباتر شدن 
  حل مساله و معایبی مثل خطر سرریز در پشته  به علت بازگشت های بیش از حد عمیق در بعضی مسایل و یا استفاده بیش از حد از حافظه باشند."""